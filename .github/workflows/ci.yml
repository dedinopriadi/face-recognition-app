name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: face-recognition-app
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and Test
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests with coverage
      run: npm test
    
    - name: Check code formatting
      run: npm run format --check
    
    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security audit
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Check for known vulnerabilities
      run: npm audit --audit-level=high
    
    - name: Run Snyk security scan (optional)
      continue-on-error: true
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Docker build and test
  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: docker build -t ${{ env.DOCKER_IMAGE }} .
    
    - name: Test Docker image
      run: |
        # Test container startup
        docker run -d --name test-container -p 3000:3000 \
          -e NODE_ENV=test \
          -e REDIS_URL=redis://localhost:6379 \
          ${{ env.DOCKER_IMAGE }}
        
        # Wait for container to be ready
        sleep 30
        
        # Test if container is running
        if docker ps | grep test-container; then
          echo "✅ Container is running successfully"
          
          # Test basic connectivity
          if curl -f http://localhost:3000/ > /dev/null 2>&1; then
            echo "✅ Application is responding"
          else
            echo "⚠️  Application is running but not responding to HTTP requests"
          fi
        else
          echo "❌ Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  # Performance testing
  performance:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup Redis for testing
      run: |
        # Start Redis in background
        docker run -d --name redis-test -p 6379:6379 redis:alpine
        sleep 5
        
        # Test Redis connection
        docker exec redis-test redis-cli ping
    
    - name: Run performance tests
      run: |
        # Start the app in background
        npm start &
        APP_PID=$!
        
        # Wait for app to start
        sleep 15
        
        # Test if app is running
        if curl -f http://localhost:3000/ > /dev/null 2>&1; then
          echo "✅ Application started successfully"
          
          # Run basic performance test
          RESPONSE_TIME=$(curl -w "%{time_total}" -o /dev/null -s "http://localhost:3000/")
          echo "Response time: ${RESPONSE_TIME}s"
          
          if (( $(echo "$RESPONSE_TIME < 5.0" | bc -l) )); then
            echo "✅ Performance is acceptable"
          else
            echo "⚠️  Response time is slow: ${RESPONSE_TIME}s"
          fi
        else
          echo "❌ Application failed to start"
          exit 1
        fi
        
        # Kill the app
        kill $APP_PID || true
        
        # Cleanup Redis
        docker stop redis-test
        docker rm redis-test



  # Notify on success
  notify-success:
    runs-on: ubuntu-latest
    needs: [test, security, docker, performance]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify success
      run: |
        echo "🎉 CI/CD pipeline completed successfully!"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Actor: ${{ github.actor }}"
        
        # Add your success notification logic here
        # Example for Slack:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"🎉 Face Recognition App CI/CD pipeline passed!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Notify on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [test, security, docker, performance]
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Actor: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Job: ${{ github.job }}"
        
        # Add your failure notification logic here
        # Example for Slack:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"❌ Face Recognition App CI/CD pipeline failed!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }} 